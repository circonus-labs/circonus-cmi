#!/usr/bin/env node

var tool = require('./lib/index.js'),
    async = require('async'),
    fs = require('fs'),
    argv = require('argv'),
    util = require('util');

var argv_config = argv.option([
  { name: 'config-file',
    short: 'f',
    type: 'path',
    description: 'config file with AWS and Circonus credentials' }
, { name: 'circonus',
    short: 'c',
    type: 'string',
    description: 'synchronized with circonus via config section <name>' }
, { name: 'ec2',
    short: 'e',
    type: 'string',
    description: 'synchronized with ec2 via config section <name>' }
, { name: 'privatechef',
    short: 'p',
    type: 'string',
    description: 'synchronized with chef via config section <name>' }
]);

var args = argv_config.run();

var options;
if(!args.options["config-file"] || !args.options.circonus) {
    argv_config.help();
    process.exit(-1);
}
try {
    options = JSON.parse(fs.readFileSync(args.options["config-file"]));
} catch(e) {
    console.log("Error reading config file: " + args.options["config-file"]);
    process.exit(-1);
}
if(!args.options.circonus || !options[args.options.circonus]) {
    console.log(args.options.circonus + " is not a valid circonus config");
    process.exit(-1);
}

var circonusOpts = options[args.options.circonus];
if(circonusOpts.protocol === 'http'){
    console.log('http');
    circonusOpts.protocol = require('http');
}

var circonus = new tool.circonus(circonusOpts); 

var aws = null;
if(args.options.ec2) {
    aws = new tool.aws(options[args.options.ec2]);
}

var chef = null;
if(args.options.privatechef) {
    var opts = options[args.options.privatechef] || {};
    opts.source = args.options.privatechef;
    chef = new tool.chef(opts);
}

function sweep_aws(cb) {
    aws.find_nodes();
    aws.on('error', function(err) { cb(err, null); });
    aws.on('nodes', function(d1, d2) {
        cb(null, { ips: d1, instances: d2 })
    });
}

function sweep_chef(cb) {
    chef.find_nodes();
    chef.on('error', function(err) { cb(err, null); });
    chef.on('nodes', function(d1, d2) {
        cb(null, { nodes: d1, ips: d2 });
    });
}

function sweep_circonus(cb) {
    circonus.find_nodes();
    circonus.on('error', function(err) { console.log(err); cb(err, null); });
    circonus.on('nodes', function(d1) {
        cb(null, { nodes: d1 })
    });
}

if(aws) {
    async.parallel({
        'circonus': sweep_circonus,
        'ec2': sweep_aws
    },
    function(err, results) {
        if(!results.ec2 || !results.circonus) {
            console.log("Error retrieving inventories");
            process.exit(-1);
        }
        console.log("scan complete. starting updates...");
        var updates = circonus.ec2_updates(results.ec2);

        async.parallelLimit(updates.addTags, 4, function(err, data) {
            console.log("finished tagging: ", err ? err : "done");
        });
    });
}

if(chef) {
    async.parallel({
        'circonus': sweep_circonus,
        'chef': sweep_chef
    }, function(err, results){
        if(!results.circonus || !results.chef){
            console.log('Error retrieving inventories');
            process.exit(-1);
        }
        console.log('scan complete. starting updates...');
        updateChecks = circonus.chef_updates(chef);
        async.parallelLimit(updateChecks, 4, function(err, data){
            console.log('Finished updates: ', err ? err : 'done');
        });
    });
}
