#!/usr/bin/env node

/*
 * Copyright (c) 2013, Circonus, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *     * Neither the name Circonus, Inc. nor the names of its contributors
 *       may be used to endorse or promote products derived from this
 *       software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var tool = require('./lib/index.js'),
    async = require('async'),
    fs = require('fs'),
    argv = require('argv'),
    util = require('util');

var argv_config = argv.option([
  { name: 'config-file',
    short: 'f',
    type: 'path',
    description: 'config file with AWS and Circonus credentials' }
, { name: 'circonus',
    short: 'c',
    type: 'string',
    description: 'synchronized with circonus via config section <name>' }
, { name: 'ec2',
    short: 'e',
    type: 'string',
    description: 'synchronized with ec2 via config section <name>' }
, { name: 'privatechef',
    short: 'p',
    type: 'string',
    description: 'synchronized with chef via config section <name>' }
]);

var args = argv_config.run();

var options;
if(!args.options["config-file"] || !args.options.circonus) {
    argv_config.help();
    process.exit(-1);
}
try {
    options = JSON.parse(fs.readFileSync(args.options["config-file"]));
} catch(e) {
    console.log("Error reading config file: " + args.options["config-file"]);
    process.exit(-1);
}
if(!args.options.circonus || !options[args.options.circonus]) {
    console.log(args.options.circonus + " is not a valid circonus config");
    process.exit(-1);
}

var circonus = new tool.circonus(options[args.options.circonus]);

var aws = null;
if(args.options.ec2) {
    aws = new tool.aws(options[args.options.ec2]);
}

var chef = null;
if(args.options.privatechef) {
    var opts = options[args.options.privatechef] || {};
    opts.source = args.options.privatechef;
    chef = new tool.chef(opts);
}

function sweep_aws(cb) {
    aws.find_nodes();
    aws.on('error', function(err) { cb(err, null); });
    aws.on('nodes', function(d1, d2) {
        cb(null, { ips: d1, instances: d2 });
    });
}

function sweep_chef(cb) {
    chef.find_nodes();
    chef.on('error', function(err) { cb(err, null); });
    chef.on('nodes', function(d1, d2) {
        cb(null, { nodes: d1, ips: d2 });
    });
}

function sweep_circonus(cb) {
    circonus.find_nodes();
    circonus.on('error', function(err) { console.log(err); cb(err, null); });
    circonus.on('nodes', function(d1) {
        cb(null, { nodes: d1 });
    });
}



if(aws) {
    async.parallel({
        'circonus': sweep_circonus,
        'ec2': sweep_aws
    },
    function(err, results) {
        if(!results.ec2 || !results.circonus) {
            console.log("Error retrieving inventories");
            process.exit(-1);
        }
        console.log("scan complete. starting updates...");
        var updates = circonus.ec2_updates(results.ec2);

        async.parallelLimit(updates.addTags, 4, function(err, data) {
            console.log("finished tagging: ", err ? err : "done");
        });
    });
}

if(chef) {
    console.info('Scanning Inventories');
    async.parallel({
        'circonus': sweep_circonus,
        'chef': function(cb){
            if(!chef) return cb();
            sweep_chef(cb);
        }
    }, function(err, results){
        if(!results.circonus || !results.chef){
            console.error('Error retrieving all inventories');
            process.exit(-1);
        }

        console.info('Scan complete. Compiling updates');

        updateChefChecks = circonus.chef_updates(chef);

        console.info('Compiled updates:', updateChefChecks.stats);

        if(updateChefChecks.stats.toBeUpdated + updateChefChecks.stats.toBeAdded === 0){
            console.info('No work necessary for chef.');
            return;
        }

        console.info('Starting updates');
        async.parallelLimit(updateChefChecks.updates, 4, function(err, data){
            var stats = {};
            var failures;
            for(var i = 0, len = data.length; i < len; i++){
                var result = data[i];
                var action = result.action;
                if(!stats[action]){
                    stats[action] = {
                        total: 0,
                        success: 0,
                        fail: 0
                    };
                }
                stats[action].total++;
                if(result.code === 200){
                    stats[action].success++;
                } else {
                    stats[action].fail++;
                    if(!failures) failures = {};
                    if(!failures[action]) failures[action] = [];
                    failures[action].push(result);
                }
            }
            console.info('Finished updates:', stats);
            if(failures) console.error('Failures:', failures);
        });

    });
}
