#!/usr/bin/env node

/*
 * Copyright (c) 2013, Circonus, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *     * Neither the name Circonus, Inc. nor the names of its contributors
 *       may be used to endorse or promote products derived from this
 *       software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var tool = require('./lib/index.js'),
    async = require('async'),
    fs = require('fs'),
    argv = require('argv'),
    util = require('util');

var argv_config = argv.option([
  { name: 'config-file',
    short: 'f',
    type: 'path',
    description: 'config file with AWS and Circonus credentials' }
, { name: 'circonus',
    short: 'c',
    type: 'string',
    description: 'synchronized with circonus via config section <name>' }
, { name: 'aws',
    short: 'e',
    type: 'string',
    description: 'synchronized with aws via config section <name>' }
, { name: 'privatechef',
    short: 'p',
    type: 'string',
    description: 'synchronized with chef via config section <name>' }
]);

var args = argv_config.run();

var options;
if(!args.options["config-file"] || !args.options.circonus) {
    argv_config.help();
    process.exit(-1);
}
try {
    options = JSON.parse(fs.readFileSync(args.options["config-file"]));
} catch(e) {
    console.log("Error reading config file: " + args.options["config-file"]);
    process.exit(-1);
}
if(!args.options.circonus || !options[args.options.circonus]) {
    console.log(args.options.circonus + " is not a valid circonus config");
    process.exit(-1);
}

if(args.options.aws) {
    if (!options[args.options.aws].regions) {
       /* If the user didn't specify regions in the config file,
        * just use these */
       options[args.options.aws].regions = {
            "us-east-1": "https://monitoring.us-east-1.amazonaws.com",
            "us-west-1": "https://monitoring.us-west-1.amazonaws.com",
            "us-west-2": "https://monitoring.us-west-2.amazonaws.com",
            "eu-west-1": "https://monitoring.eu-west-1.amazonaws.com",
            "ap-southeast-1": "https://monitoring.ap-southeast-1.amazonaws.com",
            "ap-southeast-2": "https://monitoring.ap-southeast-2.amazonaws.com",
            "ap-northeast-1": "https://monitoring.ap-northeast-1.amazonaws.com",
            "sa-east-1": "https://monitoring.sa-east-1.amazonaws.com"
        }
    }
    if (!options[args.options.aws].granularity) {
        options[args.options.aws].granularity = "5";
    }
    else {
        if ((options[args.options.aws].granularity != "1") &&
            (options[args.options.aws].granularity != "5")) {
            console.log(args.options.aws + " is not a valid aws config - granularity must be '1' or '5'");
            process.exit(-1);
        }
    }
}

var aws_options = options[args.options.aws];
var circonus = new tool.circonus(options[args.options.circonus], options[args.options.aws]);

var aws = null;
if(args.options.aws) {
    aws = new tool.aws(options[args.options.aws]);
}

var chef = null;
if(args.options.privatechef) {
    var opts = options[args.options.privatechef] || {};
    opts.source = args.options.privatechef;
    chef = new tool.chef(opts);
}

function sweep_ec2(cb) {
    aws.process('ec2');
    aws.on('error', function(err) { cb(err, null); });
    aws.on('ec2', function(d1, d2, d3) {
        cb(null, { ips: d1, instances: d2, data: d3 });
    });
}
function sweep_ebs(cb) {
    aws.process('ebs');
    aws.on('error', function(err) { cb(err, null); });
    aws.on('ebs', function(d1) {
        cb(null, { data: d1 });
    });
}
function sweep_elb(cb) {
    aws.process('elb');
    aws.on('error', function(err) { cb(err, null); });
    aws.on('elb', function(d1) {
        cb(null, { data: d1 });
    });
}
function sweep_rds(cb) {
    aws.process('rds');
    aws.on('error', function(err) { cb(err, null); });
    aws.on('rds', function(d1) {
        cb(null, { data: d1 });
    });
}

function sweep_chef(cb) {
    chef.find_nodes();
    chef.on('error', function(err) { cb(err, null); });
    chef.on('nodes', function(d1, d2) {
        cb(null, { nodes: d1, ips: d2 });
    });
}

function sweep_circonus(cb) {
    circonus.get_brokers();
    circonus.on('error', function(err) {console.log(err); cb(err, null); });
    circonus.on('brokers', function(d1) {
        circonus.get_checks();
        circonus.on('error', function(err) {console.log(err); cb(err, null); });
        circonus.on('checks', function(d1) {
            circonus.find_nodes();
            circonus.on('error', function(err) { console.log(err); cb(err, null); });
            circonus.on('nodes', function(d1, d2) {
                cb(null, { nodes: d1 });
            });
        });
    });
}



if(aws) {
    var params = {};
    aws.get_regions();
    aws.on('regions', function() {
        params.circonus = sweep_circonus;
        if ((aws.options.ec2) && (aws.options.ec2.length > 0)) {
            params.ec2 = sweep_ec2;
        }
        if ((aws.options.ebs) && (aws.options.ebs.length > 0)) {
            params.ebs = sweep_ebs;
        }
        if ((aws.options.elb) && (aws.options.elb.length > 0)) {
            params.elb = sweep_elb;
        }
        if ((aws.options.rds) && (aws.options.rds.length > 0)) {
            params.rds = sweep_rds;
        }
        async.parallel(params, function(err, results) {
            if(!results.circonus) {
                console.log("Error retrieving inventories");
                process.exit(-1);
            }
            console.log("scan complete. starting updates...");
            if (results.ec2) {
                var updates = circonus.ec2_updates_tagging(results.ec2);
                async.parallelLimit(updates.addTags, 4, function(err, data) {
                    console.log("finished processing ec2 tagging: ", err ? err : "done");
                });
            }
            if ((options[args.options.circonus].cloudwatch) &&
                (options[args.options.circonus].cloudwatch.update_checks === true)) {
                var params = [];
                if (results.ec2) {
                    params.push( {
                        'o': results.ec2,
                        'namespace': "AWS/EC2",
                        'short_namespace': "ec2"
                    });
                }
                if (results.ebs) {
                    params.push( {
                        'o': results.ebs,
                        'namespace': "AWS/EBS",
                        'short_namespace': "ebs"
                    });
                }
                if (results.elb) {
                    params.push( {
                        'o': results.elb,
                        'namespace': "AWS/ELB",
                        'short_namespace': "elb"
                    });
                }
                if (results.rds) {
                    params.push( {
                        'o': results.rds,
                        'namespace': "AWS/RDS",
                        'short_namespace': "rds"
                    });
                }
                /* We want to do these in a series.... simultaneous calls to the Circonus API
                 * can cause problems */
                async.eachSeries(params, circonus.do_update.bind(circonus), function(err) {
                    if (err) {
                        console.log(err);
                    }
                    var counts = circonus.get_counts();
                    if (counts) {
                        console.log("Cloudwatch Check Results");
                        console.log("------");
                        for (var namespace in counts) {
                            var entry = counts[namespace];
                            var add_failed = entry.to_add - entry.add;
                            var update_failed = entry.to_update - entry.update;
                            var remove_failed = entry.to_remove - entry.remove;
                            console.log(namespace);
                            console.log("------");
                            console.log("Added:         " + entry.add);
                            console.log("Updated:       " + entry.update);
                            console.log("Removed:       " + entry.remove);
                            console.log("Add Failed:    " + add_failed);
                            console.log("Update Failed: " + update_failed);
                            console.log("Remove Failed: " + remove_failed);
                            console.log("___________________\n");
                        }
                    }
                });
            }
        });
    });
}

if(chef) {
    console.info('Scanning Inventories');
    async.parallel({
        'circonus': sweep_circonus,
        'chef': function(cb){
            if(!chef) return cb();
            sweep_chef(cb);
        }
    }, function(err, results){
        if(!results.circonus || !results.chef){
            console.error('Error retrieving all inventories');
            process.exit(-1);
        }

        console.info('Scan complete. Compiling updates');

        updateChefChecks = circonus.chef_updates(chef);

        console.info('Compiled updates:', updateChefChecks.stats);

        if(updateChefChecks.stats.toBeUpdated + updateChefChecks.stats.toBeAdded === 0){
            console.info('No work necessary for chef.');
            return;
        }

        console.info('Starting updates');
        async.parallelLimit(updateChefChecks.updates, 4, function(err, data){
            var stats = {};
            var failures;
            for(var i = 0, len = data.length; i < len; i++){
                var result = data[i];
                var action = result.action;
                if(!stats[action]){
                    stats[action] = {
                        total: 0,
                        success: 0,
                        fail: 0
                    };
                }
                stats[action].total++;
                if(result.code === 200){
                    stats[action].success++;
                } else {
                    stats[action].fail++;
                    if(!failures) failures = {};
                    if(!failures[action]) failures[action] = [];
                    failures[action].push(result);
                }
            }
            console.info('Finished updates:', stats);
            if(failures) console.error('Failures:', failures);
        });

    });
}
